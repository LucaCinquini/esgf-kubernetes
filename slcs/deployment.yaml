apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: esgf-slcs
  labels:
    stack: esgf
    component: slcs
    slcs-role: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      stack: esgf
      component: slcs
      slcs-role: frontend
  template:
    metadata:
      labels:
        stack: esgf
        component: slcs
        slcs-role: frontend
    spec:
      initContainers:
        # Wait for both postgres databases to become available before starting
        - name: wait-for-postgres-slcs
          image: postgres
          env:
            - name: PGHOST
              value: esgf-postgres-slcs
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: slcsuser
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: esgf-slcs-secrets
                  key: slcs-database-password
            - name: PGDATABASE
              value: slcs
          command:
            # Try every 5 seconds for no longer than 10 mins
            - bash
            - -c
            - |
              for i in $(seq 120); do
                sleep 5
                echo "Attempt $i of 120"
                if pg_isready; then exit 0; fi
              done
              exit 1
        - name: wait-for-postgres-esgcet
          image: postgres
          env:
            - name: PGHOST
              value: esgf-postgres-esgcet
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: dbsuper
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: esgf-postgres-esgcet-secrets
                  key: database-password
            - name: PGDATABASE
              value: esgcet
          command:
            # Try every 5 seconds for no longer than 10 mins
            - bash
            - -c
            - |
              for i in $(seq 120); do
                sleep 5
                echo "Attempt $i of 120"
                if pg_isready; then exit 0; fi
              done
              exit 1
      containers:
        - name: slcs
          image: esgfhub/slcs:latest
          ports:
            - name: http
              containerPort: 8000
          # The readiness and liveness probes run the same thing, but the liveness
          # probe just waits a while before kicking in whereas the readiness probe
          # starts straight away
          #readinessProbe:
          #  httpGet: &probe
          #    path: /esgf-slcs
          #    port: 8000
              # The ALLOWED_HOSTS setting means that the app will only accept
              # requests from the correct host
          #    httpHeaders:
          #      - name: Host
          #        value: "{{ .Values.hostname }}"
          #      - name: X-Forwarded-Host
          #        value: "{{ .Values.hostname }}"
          #      - name: X-Forwarded-Proto
          #        value: https
          #  initialDelaySeconds: 10
          #  periodSeconds: 10
          #livenessProbe:
          #  httpGet: *probe
          #  initialDelaySeconds: 60
          #  periodSeconds: 10
          env:
            # Generic Django settings
            - name: SCRIPT_NAME
              value: /esgf-slcs
            - name: DJANGO_ALLOWED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: esgf-config
                  key: esgf-hostname
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: esgf-slcs-secrets
                  key: slcs-secret-key
            # SLCS database
            - name: DJANGO_DATABASE_DEFAULT_ENGINE
              value: django.db.backends.postgresql
            - name: DJANGO_DATABASE_DEFAULT_NAME
              value: slcs
            - name: DJANGO_DATABASE_DEFAULT_HOST
              value: esgf-postgres-slcs
            - name: DJANGO_DATABASE_DEFAULT_PORT
              value: "5432"
            - name: DJANGO_DATABASE_DEFAULT_USER
              value: slcsuser
            - name: DJANGO_DATABASE_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: esgf-slcs-secrets
                  key: slcs-database-password
            # ESGF User database
            - name: DJANGO_DATABASE_USERDB_ENGINE
              value: django.db.backends.postgresql
            - name: DJANGO_DATABASE_USERDB_NAME
              value: esgcet
            - name: DJANGO_DATABASE_USERDB_HOST
              value: esgf-postgres-esgcet
            - name: DJANGO_DATABASE_USERDB_PORT
              value: "5432"
            - name: DJANGO_DATABASE_USERDB_USER
              value: dbsuper
            - name: DJANGO_DATABASE_USERDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: esgf-postgres-esgcet-secrets
                  key: database-password
            # Make the rootAdmin account a superuser
            - name: DJANGO_CREATE_SUPERUSER
              value: "1"
            - name: DJANGO_SUPERUSER_USERNAME
              value: "rootAdmin"
            - name: DJANGO_SUPERUSER_EMAIL
              valueFrom:
                configMapKeyRef:
                  name: esgf-config
                  key: root-admin-email
            # Other SLCS-specific settings
            - name: ESGF_SLCS_URL
              valueFrom:
                configMapKeyRef:
                  name: esgf-config
                  key: slcs-url
            - name: ESGF_SLCS_BASIC_AUTH_REALM
              valueFrom:
                configMapKeyRef:
                  name: esgf-config
                  key: esgf-hostname
            - name: ONLINECA_SUBJECT_NAME_TEMPLATE
              value: /DC=esgf/CN=$$OPENID
            - name: ONLINECA_CERT_PATH
              value: /esg/certificates/slcsca/ca.crt
            - name: ONLINECA_KEY_PATH
              value: /esg/certificates/slcsca/ca.key
            - name: ONLINECA_TRUSTROOTS_DIR
              value: /esg/certificates/slcsca/trustroots
          volumeMounts:
            - mountPath: /esg/certificates/slcsca/ca.crt
              name: slcsca
              subPath: tls.crt
            - mountPath: /esg/certificates/slcsca/ca.key
              name: slcsca
              subPath: tls.key
            - mountPath: /esg/certificates/slcsca-trustroots
              name: trustroots
            - mountPath: /esg/certificates/esg-trust-bundle.pem
              name: trust-bundle
              subPath: esg-trust-bundle.pem
      volumes:
        - name: slcsca
          secret:
            secretName: esgf-slcs-ca
        - name: trustroots
          emptyDir: {}
        - name: trust-bundle
          configMap:
            name: esgf-trust-bundle
